int climbStairs(int n) {
        /*
        //space optimization
        int prev2=1;
        int prev1=1;
        int curr;
        if(n==1)return prev2;
        for(int i=2;i<=n;i++){
            curr=prev1+prev2;
            prev2=prev1;
            prev1=curr;
        }
        return curr;

        //tabulation
        vector<int>dp(n+1,-1);
        dp[0]=1;
        dp[1]=1;
        if(dp[n]!=-1)return dp[n];
        for(int i=2;i<=n;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];

        //recursion
        if(n==0)return 1;
        if(n==1)return 1;
        return climbStairs(n-1)+climbStairs(n-2); 
        */

        //memoization
        vector<int>dp(n+1,-1);
        return solve(n,dp);
    }
    int solve(int n,vector<int> &dp){
        if(n==0)return 1;
        if(n==1)return 1;

        if(dp[n]!=-1)return dp[n];
        dp[n]=solve(n-1,dp)+solve(n-2,dp);
        return dp[n];
    }