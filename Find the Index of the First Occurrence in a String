class Solution {
public:
    void KMPSearch(string &txt, string &pat)
{
    int M = pat.size();
    int N = txt.size();
    int lps[M];
 
    // Preprocess the pattern (calculate lps[] array)
    computeLPSArray(pat, M, lps);
 
    int i = 0;
    int j = 0;
    while ((N - i) >= (M - j)) {
        if (pat[j] == txt[i]) {
            j++;
            i++;
        }
        if (j == M) {
            //printf("Found pattern at index %d ", i - j);
            cout << i-j << endl;
            j = lps[j - 1];
        }
        else if (i < N && pat[j] != txt[i]) {
            if (j != 0)
                j = lps[j - 1];
            else
                i = i + 1;
                //cout<<-1<<endl;
        }
    }
}
void computeLPSArray(string &pat, int M, int *lps)
{
    // length of the previous longest prefix suffix
    int len = 0;
    lps[0] = 0;
    int i = 1;
    while (i < M) {
        if (pat[i] == pat[len]) {
            len++;
            lps[i] = len;
            i++;
        }
        else
        {
            if (len != 0) {
                len = lps[len - 1];
            }
            else
            {
                lps[i] = 0;
                i++;
            }
        }
    }
}
    int strStr(string haystack, string needle) {
        int n=haystack.size();
        int m=needle.size();
        KMPSearch(haystack,needle);
        return -1;
    }
};