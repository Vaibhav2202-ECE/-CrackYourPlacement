#include <bits/stdc++.h> 
#include <vector>
vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector<pair<pair<int, int>, int>> &g)
{
    //create adjacency list
    unordered_map<int,list<pair<int,int>>>adj;
    for(int i=0;i<g.size();i++)
    {
        int u=g[i].first.first;
        int v=g[i].first.second;
        int w=g[i].second;

        adj[u].push_back(make_pair(v, w));
        adj[v].push_back(make_pair(u, w));
    }
    
    //initialise key store minimum weights, MST store node previously traversed, parent store parent of node
    vector<int>key(n+1,INT_MAX);
    vector<bool>MST(n+1,false);
    vector<int>parent(n+1,-1);
    
    key[1]=0;
    parent[1]=-1;
    
    //find key of each node
    for(int i=1;i<n;i++)
    {
       
       int u;
       int mini=INT_MAX;
       
       for(int v=1;v<=n;v++){
           if(key[v]<mini && MST[v]==false )
           {
               u=v;
               mini=key[v];
           }
       }
       MST[u]=true;

       //check every adajcent nodes
       for(auto neighbor:adj[u])
        {
        
            int v=neighbor.first;
            int w=neighbor.second;

            if( MST[v]==false && w < key[v] )
            {
                key[v]=w;
                parent[v]=u;
            }   
        }
    }
    vector<pair<pair<int, int>, int>>ans;
    for(int i=2;i<=n;i++)
    {
       ans.push_back(make_pair(make_pair(parent[i], i), key[i]));
    }
    return ans;
}
