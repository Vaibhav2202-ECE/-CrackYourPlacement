class Solution {
public:

    void solve(vector<int> &candidates, int target, vector<vector<int>> &ans, vector<int> &r, int i){
        if(target==0){
            ans.push_back(r);
            return;
        }
        while(i<candidates.size() && target-candidates[i]>=0){

            r.push_back(candidates[i]);
            solve(candidates,target-candidates[i],ans,r,i);
            i++;
            r.pop_back();

        }
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>>ans;
        sort(candidates.begin(),candidates.end());
        candidates.erase((candidates.begin(),candidates.end()),candidates.end());

        vector<int>r;
        solve(candidates,target,ans,r,0);

        return ans;
    }
};