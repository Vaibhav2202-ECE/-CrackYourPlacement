#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
    //create adjacency list
    unordered_map<int,list<pair<int,int>>>adj;
    for(int i=0;i<edges;i++)
    {
        int u=vec[i][0];
        int v=vec[i][1];
        int w=vec[i][2];

        adj[u].push_back(make_pair(v, w));
        adj[v].push_back(make_pair(u, w));

    }

    vector<int>dist(vertices);
    for(int i=0;i<vertices;i++)
    {
        dist[i]=INT_MAX;
    }

    set<pair<int,int>>st;
    dist[source]=0;
    st.insert(make_pair(0,source));
    
    while(!st.empty())
    {
        auto top=*(st.begin());
        int distance=top.first;
        int topNode=top.second;
        
        st.erase(st.begin());
        for(auto neighbor:adj[topNode]){
       
           if(distance+neighbor.second<dist[neighbor.first]){
               
               auto rec=st.find(make_pair(dist[neighbor.first],neighbor.first));
 
        // if distance find
               if(rec!=st.end())
               {
                   st.erase(rec);
               }

               dist[neighbor.first]=distance + neighbor.second;
               st.insert(make_pair(dist[neighbor.first],neighbor.first));
              
           }
        }
    }
    return dist;
}
