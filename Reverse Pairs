class Solution {
    private:
    int mergesort(vector<int>& nums,int left,int right) {
        
        if (left >= right) return 0;
        int mid = left + (right - left) / 2;
        int count = mergesort(nums, left, mid) + mergesort(nums, mid + 1, right);
        int j = mid + 1;
        for (int i = left; i <= mid; ++i) {
            while (j <= right && nums[i] > 2LL * nums[j]) {
                ++j;
            }
            count += j - (mid + 1);
        }
        vector<int> temp(right - left + 1);
        int i = left, k = mid + 1, l = 0;
        while (i <= mid && k <= right) {
            if (nums[i] <= nums[k]) {
                temp[l++] = nums[i++];
            } else {
                temp[l++] = nums[k++];
            }
        }
        while (i <= mid) {
            temp[l++] = nums[i++];
        }
        while (k <= right) {
            temp[l++] = nums[k++];
        }
        for (int i = 0; i < temp.size(); ++i) {
            nums[left + i] = temp[i];
        }
        
        return count;
    }
public:
    int reversePairs(vector<int>& nums) {
        if (nums.size()==0)return 0;
        int n=nums.size();
        return mergesort(nums,0,n-1);
    }
};