class Solution {
    void dfs (int node,int &timer,vector<int>&disc,vector<int>&low,int parent,unordered_map<int,bool>&vis,vector<vector<int>>&result, unordered_map<int,list<int>>&adj){
               vis[node]=true;
               disc[node]=low[node]=timer++;

               for(auto nbr:adj[node])
               {
                if(nbr==parent)
                    continue;
                if(!vis[nbr]){
                    dfs(nbr,timer,disc,low,node,vis,result,adj);
      //if there is backedge present between nodes then we have to update low[node] by minimum.
                    low[node]=min(low[node],low[nbr]);
                    //check edge is a bridge
                    if(low[nbr]>disc[node]){
                        result.push_back({node,nbr});
                    }
                 }
                 else{
                    //backedge
                    low[node]=min(low[node],disc[nbr]);
                 }
               }
            }
public:
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        
        unordered_map<int,list<int>>adj;

        for(const auto& con:connections)
        {
            int u=con[0];
            int v=con[1];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        int timer=0;
        vector<int>disc(n);
        vector<int>low(n);
        unordered_map<int,bool>vis;
        vector<vector<int>> result;
        for(int i=0;i<n;i++)
        {
            disc[i]=-1;
            low[i]=-1;
        }
        
        for(int i=0;i<n;i++)
        {
            if(!vis[i])
            {
                dfs(i,timer,disc,low,-1,vis,result,adj);
            }
        }
        return result;
    }
};